openapi: '3.0.2'
info:
  title: RecyThing
  version: '1.0'
  description: "API Documentation Capstone Project RecyThing Kelompok 2"
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: authentication
    description: Endpoint for user register/login
  - name: user
    description: Endpoint for user account
  - name: reporting
    description: Endpoint for user reporting littering & rubbish
  - name: faqs
    description: Endpoint for user get data faqs
  - name: user tasks
    description: Endpoint for user doing task
  - name: chatbot (ReMin AI)
    description: Endpoint for user asking question to chatbot

  - name: manage users
    description: Endpoint for admin manage users account
  - name: manage reports
    description: Endpoint for admin manage reports
  - name: manage articles
    description: Endpoint for admin manage articles
  - name: manage achievements
    description: Endpoint for admin manage achievements
  - name: manage admins
    description: Endpoint for super admin manage admins
  - name: manage tasks
    description: Endpoint for admin manage tasks
  - name: manage custom data
    description: Endpoint for admin manage custom data

paths:
  /register:
    post:
      tags:
        - authentication
      summary: Register a new user
      description: Register new account
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        '201':
          description: Register Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: user successfully register! OTP sent to your email
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example: U00001
                      name:
                        type: string
                        example: U00001
                      email:
                        type: string
                        example: john.doe@gmail.com
                      is_verified:
                        type: boolean
                        example: false
        '400':
          description: Register Failed (validation error / email already exists)
  
  /verify-otp:
    post:
      tags:
        - authentication
      summary: Verify OTP
      description: Verify the OTP sent to the user email after registration.
      operationId: verifyOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the user
                  example: john.doe@gmail.com
                otp:
                  type: string
                  description: The OTP sent to the user's email
                  example: 678901
      responses:
        '200':
          description: OTP successfully verified, user registration complete
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: OTP successfully verified. Registration complete!
        '400':
          description: Invalid OTP or user ID

  /resend-otp:
    post:
      tags:
        - authentication
      summary: Resend OTP
      description: Resend OTP sent to the user email.
      operationId: resendOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the user
                  example: john.doe@gmail.com
      responses:
        '200':
          description: OTP successfully verified, user registration complete
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: new otp sent to your email!
        '400':
          description: Invalid email or user already verified
  /login:
    post:
      tags:
        - authentication
      summary: Login User
      description: Login account
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          description: Login Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: login successfully!
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        example: john.doe@gmail.com
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiVVNSMDAwMSIsInJvbGUiOiJ1c2VyIiwiZXhwIjoxNzE2ODI3NDE1fQ.o4rXzRLdWGS3iqtznZg9hhJyOklWyrNUA0MgOmUkfis
        '400':
          description: Login Failed (invalid email / password)

  /admin/login:
    post:
      tags:
        - authentication
      summary: Login Super admin / Admin
      description: Login account
      operationId: loginAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          description: Login Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: login successfully!
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        example: john.doe@gmail.com
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiVVNSMDAwMSIsInJvbGUiOiJ1c2VyIiwiZXhwIjoxNzE2ODI3NDE1fQ.o4rXzRLdWGS3iqtznZg9hhJyOklWyrNUA0MgOmUkfis
        '400':
          description: Login Failed (invalid email / password)

  /user/profile:
    get:
      tags:
        - user
      summary: Get user profile information
      description: Get user profile information
      operationId: getUserProfile
      responses:
        '200':
          description: Get profile Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: object
                    properties:
                      id: 
                        type: string
                        example: USR0001  
                      name: 
                        type: string
                        example: John Doe  
                      email: 
                        type: string
                        example: john.doe@gmail.com  
                      phone_number: 
                        type: string
                        example: 6289511223366  
                      point: 
                        type: integer
                        example: 0  
                      gender: 
                        type: string
                        example: laki-laki 
                      birth_date: 
                        type: string
                        example: 1990-01-01T07:00:00+07:00
                      address: 
                        type: string
                        example: Jalan Soedirman
                      picture_url:
                        type: string
                        example: http://example.com/yourimage.png
        '400':
          description: Get Failed (token invalid)
      security:
        - Bearer: []
        
    put:
      tags:
        - user
      summary: Edit user profile information
      description: Edit user profile information
      operationId: editUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Update Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: user updated!
        '400':
          description: Update Failed (validation error dll)
      security:
        - Bearer: []

  /user/uploadAvatar:
    post:
      tags:
        - user
      summary: Upload Avatar User
      description: Upload Avatar On User Profile
      operationId: uploadAvatarUser
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: image
                  description: Image avatar anda
        required: true
      responses:
        '200':
          description: Upload Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: upload successfully!
                  data:
                    type: object
                    properties:
                      avatar_url:
                        type: string
                        example: http://example.com/yourimage.png
        '400':
          description: Upload Failed (filetype error, filesize to large error, dll)
      security:
        - Bearer: []

  /report:
    post:
      tags:
        - reporting
      summary: Create a new report for rubbish or littering
      description: Endpoint for Report rubbish or Report Littering
      operationId: createReport
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                report_type:
                  type: string
                  description: Type of the report (required)
                title:
                  type: string
                  description: Title of the report (max 100 characters)
                description:
                  type: string
                  description: Description of the report (required)
                waste_type:
                  type: string
                  description: Type of waste (required)
                waste_materials:
                  type: array
                  items:
                    type: string
                  description: List of waste materials
                latitude:
                  type: number
                  format: float
                  description: Latitude coordinate (required)
                longitude:
                  type: number
                  format: float
                  description: Longitude coordinate (required)
                address:
                  type: string
                  description: Address of the report (required)
                city:
                  type: string
                  description: City of the report (required)
                province:
                  type: string
                  description: Province of the report (required)
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: List of image files
        required: true
      responses:
        '201':
          description: Report Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: report created!
                  data:
                    $ref: '#/components/schemas/ReportResponse'
        '400':
          description: Invalid request, Upload Image Failed (filetype error, filesize to large error, dll)
      security:
        - Bearer: []

    get:
      tags:
        - reporting
      summary: Get all history user reports limit 10
      description: Endpoint for Get all reports from user history
      operationId: historyUserReports
      responses:
        '200':
          description: Get History User Reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReportResponse'
        '401':
          description: Unauthorized
        '500':
          description: Status internal error               
      security:
        - Bearer: []

  /users:
    get:
      tags:
        - manage users
      summary: View all users
      description: Endpoint admin to view all users with pagination.
      operationId: viewAllUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
          example: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of users per page
          example: 10
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            default: created_at
          description: Sorted by
          example: created_at
        - name: sort_type
          in: query
          required: false
          schema:
            type: string
            default: asc
          description: Sorted type
          example: asc
      security:
        - Bearer: []
      responses:
        '200':
          description: Get all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message: 
                    type: string
                    example: ok
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 100
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: U00001
                            name:
                              type: string
                              example: "John Doe"
                            email:
                              type: string
                              example: "john.doe@gmail.com"
                            phone_number:
                              type: string
                              example: 089511223344
                            points:
                              type: integer
                              example: 100
                            gender:
                              type: string
                              example: laki-laki
                            birth_date:
                              type: string
                              format: date
                              example: 1990-01-01
                            address:
                              type: string
                              example: 123 Main Street, City, Country
                            profile_picture:
                              type: string
                              example: http://example.com/yourimage.png
        '400':
          description: Invalid param request

  /user/{userId}:
    get:
      tags:
        - manage users
      summary: Get user by id
      description: Endpoint user to get user by id
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to be deleted
          example: USR0001
      security:
        - Bearer: []
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: USR0001
                      name:
                        type: string
                        example: "John Doe"
                      email:
                        type: string
                        example: "john.doe@gmail.com"
                      phone_number:
                        type: string
                        example: 089511223344
                      points:
                        type: integer
                        example: 100
                      gender:
                        type: string
                        example: laki-laki
                      birth_date:
                        type: string
                        format: date
                        example: 1990-01-01
                      address:
                        type: string
                        example: 123 Main Street, City, Country
                      profile_picture:
                        type: string
                        example: http://example.com/yourimage.png
        '404':
          description: User not found
    delete:
      tags:
        - manage users
      summary: Delete user
      description: Endpoint admin to delete a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to be deleted
          example: U00001
      security:
        - Bearer: []
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: user successfully deleted!
        '404':
          description: User not found

  /reports:
    get:
      tags:
        - manage reports
      summary: View all reports
      description: Endpoint admin to view all reports with filters and pagination
      operationId: viewAllReports
      parameters:
        - name: page
          in: query
          description: Page number of the result set
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            example: 10
        - name: report_type
          in: query
          description: Type of the report (littering or rubbish) -- OPTIONAL
          required: false
          schema:
            type: string
            enum: [littering, rubbish]
            example: littering
        - name: status
          in: query
          description: Status of the report (need review, approve, or reject)  -- OPTIONAL
          required: false
          schema:
            type: string
            enum: [need review, approve, reject]
            example: need review
        - name: date
          in: query
          description: Date of the report in YYYY-MM-DD format  -- OPTIONAL
          required: false
          schema:
            type: string
            format: date
            example: 2024-05-24
      security:
        - Bearer: []
      responses:
        '200':
          description: Get all reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message: 
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 50
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      reports:
                        type: array
                        items:
                          type: object
                          $ref: '#/components/schemas/ReportResponse'
        '400':
          description: Invalid request parameters dll
  /report/{reportId}:
    put:
      tags:
        - manage reports
      summary: Verify report
      description: Endpoint admin to verify a report (approve or reject)
      operationId: verifyReport
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
          description: ID of the report to be verified
          example: RPT0001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [approve, reject]
                  description: New status for the report
                  example: approve
                reason:
                  type: string
                  description: Reason if report rejected
                  example: Laporan sampah kamu dianggap tidak sesuai dan tidak dapat ditindaklanjutkan
      security:
        - Bearer: []
      responses:
        '200':
          description: Report status successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: report status successfully updated!
        '400':
          description: Invalid request data
        '404':  
          description: Report not found

  /faqs:
    get:
      tags:
        - faqs
      summary: Get all FAQs
      description: Endpoint user for get all faqs
      operationId: getFaqs
      responses:
        '200':
          description: Get all success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FAQs'
  /faqs/category:
    get:
      tags:
        - faqs
      summary: Get FAQs by category
      description: Endpoint user for get faqs by category
      operationId: getFaqsByCategory
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
            example: point dan level
          description: The name of the FAQ category to retrieve,
                       invalid input (profil, littering, rubbish, misi, lokasi sampah, poin dan level, artikel)
      responses:
        '200':
          description: Get all data by category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FAQs'
  /faqs/search:
    get:
      tags:
        - faqs
      summary: Search FAQs by keyword
      description: Searches for FAQs that match a specific keyword
      operationId: getFaqsByKeyword
      parameters:
        - in: query
          name: keyword
          required: true
          schema:
            type: string
            example: ikon
          description: The keyword to search for FAQs.
      responses:
        '200':
          description: Get all data by keyword
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FAQs'

  /admin/articles:
    get:
      tags:
        - manage articles
      summary: Get all articles
      description: Endpoint admin to get all articles with pagination.
      operationId: viewAllArticles
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
          example: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of articles per page
          example: 10
      security:
        - Bearer: []
      responses:
        '200':
          description: Successfully get articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 50
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      articles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Article'
        '400':
          description: Invalid request parameters
    post:
      tags:
        - manage articles
      summary: Add new article
      description: Endpoint admin to add a new article
      operationId: addArticle
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Article'
      security:
        - Bearer: []
      responses:
        '201':
          description: Article successfully created!
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: article successfully created!
        '400':
          description: Invalid request data
  /admin/articles/{articleId}:
    put:
      tags:
        - manage articles
      summary: Edit article
      description: Endpoint admin to edit an existing article.
      operationId: editArticle
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            type: string
          description: ID of the article to be edited
          example: ART0001
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Article'
      security:
        - Bearer: []
      responses:
        '200':
          description: Article successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: article successfully updated!
        '404':
          description: Article not found
        '400':
          description: Invalid request data 
    delete:
      tags:
        - manage articles
      summary: Delete article
      description: Endpoint admin to delete an article.
      operationId: deleteArticle
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            type: string
          description: ID of the article to be deleted
          example: ART0001
      security:
        - Bearer: []
      responses:
        '200':
          description: Article successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: article successfully deleted!
        '404':
          description: Article not found
  /admin/achievements:
    get:
      tags:
        - manage achievements
      summary: Get all achievements
      description: Endpoint admin to get all achievements/badges.
      operationId: viewAllAchievements
      responses:
        '200':
          description: Successfully retrieved achievements
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Achievement'
      security:
        - Bearer: []                      
    post:
      tags:
        - manage achievements
      summary: Add new achievement
      description: Endpoint admin to add a new achievement/badge.
      operationId: addAchievement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  enum: [classic, silver, gold, platinum]
                  description: Name of the badge
                  example: gold
                targetPoint:
                  type: integer
                  description: Target point for the badge
                  example: 1000
      security:
        - Bearer: []                  
      responses:
        '201':
          description: Achievement successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: achievement successfully created!
        '400':
          description: Invalid request data
  /admin/achievements/{achievementId}:
    put:
      tags:
        - manage achievements
      summary: Update target point of an achievement
      description: Endpoint admin to update the target point of an existing achievement/badge.
      operationId: updateAchievement
      parameters:
        - name: achievementId
          in: path
          required: true
          schema:
            type: string
          description: ID of the badge to be updated
          example: ACH0001
      security:
        - Bearer: []          
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                target_point:
                  type: integer
                  description: New target point for the badge
                  example: 1200
      responses:
        '200':
          description: Achievement successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: aAchievement successfully updated!
        '404': 
          description: Achievement not found
        '400':
          description: Invalid request data
    delete:
      tags:
        - manage achievements
      summary: Delete an achievement
      description: Endpoint admin to delete an achievement/badge.
      operationId: deleteAchievement
      parameters:
        - name: achievementId
          in: path
          required: true
          schema:
            type: string
          description: ID of the badge to be updated
          example: ACH0001
      security:
        - Bearer: []
      responses:
        '200':
          description: Achievement successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: achievement successfully deleted!
        '404': 
          description: Achievement not found

  /admins:
    get:
      tags:
        - manage admins
      summary: Get all admins
      description: Endpoint super admin to get all admins data
      operationId: viewAllAdmins
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
          example: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of admins per page
          example: 10
      security:
        - Bearer: []
      responses:
        '200':
          description: Successfully get admins
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    $ref: '#/components/schemas/Admin'
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  total_data:
                    type: integer
                    example: 1
                  total_page:
                    type: integer
                    example: 1
                      
  /admin/profile:
    get:
      tags:
        - manage admins
      summary: Get admin data from JWT Token
      description: Endpoint super admin to get admin data from login
      operationId: getDataAdmin
      security:
        - Bearer: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    $ref: '#/components/schemas/Admin'
  /admin:        
    post:
      tags:
        - manage admins
      summary: Add new admin
      description: Endpoint super admin to add a new admin.
      operationId: addAdmin
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Admin'
      responses:
        '201':
          description: Admin successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: success
        '400':
          description: Invalid request data
  
  /admin/{adminId}:
    get:
      tags:
        - manage admins
      summary: Get an admin by id
      description: Endpoint for super admin to get an existing admin's data by id
      operationId: getAdminById
      security:
        - Bearer: []
      parameters:
        - name: adminId
          in: path
          required: true
          schema:
            type: string
          description: ID of the admin to be updated
          example: AD0001
      responses:
        '200':
          description: Get data admin by id
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    $ref: '#/components/schemas/Admin'
    put:
      tags:
        - manage admins
      summary: Update an admin
      description: Endpoint for super admin to update an existing admin's data.
      operationId: updateAdmin
      security:
        - Bearer: []
      parameters:
        - name: adminId
          in: path
          required: true
          schema:
            type: string
          description: ID of the admin to be updated
          example: AD0001
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EditAdmin'
      responses:
        '200':
          description: Admin successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: data successfully updated
        '400':
          description: Invalid request data
        '404':
          description: Admin not found
    delete:
      tags:
        - manage admins
      summary: Delete an admin
      description: Endpoint super admin to delete an admin.
      operationId: deleteAdmin
      security:
        - Bearer: []
      parameters:
        - name: adminId
          in: path
          required: true
          schema:
            type: string
          description: ID of the admin to be deleted
          example: AD0001
      responses:
        '200':
          description: Admin successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: data successfully deleted!
        '404':
          description: Admin not found
  /tasks/thumbnail:
    post:
      tags:
        - manage tasks
      summary: Upload Thumbnail Task
      description: Upload Thumbnail before create task
      operationId: uploadThumbnailTask
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                thumbnail:
                  type: string
                  format: image
                  example: "https://example.com/thumbnail.jpg"
      responses:
        '201':
          description: Upload Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: thumbnail uploaded!
                  data:
                    type: object
                    properties:
                      thumbnail:
                        type: string
                        example: "https://example.com/thumbnail.jpg"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: invalid request data
  /tasks:
    post:
      tags:
        - manage tasks
      summary: Create Task
      description: Endpoint admin to create a new task.
      operationId: createTask
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Task 1"
                description:
                  type: string
                  example: "Task 1 description"
                thumbnail:
                  type: string
                  example: "https://example.com/thumbnail.jpg"
                start_date:
                  type: string
                  format: date
                  example: "2020-01-01"
                end_date:
                  type: string
                  format: date
                  example: "2020-01-01"
                point:
                  type: integer
                  example: 100
                task_steps:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Step 1"
                      description:
                        type: string
                        example: "Step 1 description"
                    
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: task created!
                  data:
                    type: object
                    properties:
                      task_id:
                        type: string
                        example: TM0001
                      title:
                        type: string
                        example: "Task 1"
                      description:
                        type: string
                        example: "Task 1 description"
                      thumbnail:
                        type: string
                        example: "https://example.com/thumbnail.jpg"
                      start_date:
                        type: string
                        format: date
                        example: "2020-01-01"
                      end_date:
                        type: string
                        format: date
                        example: "2020-01-01"
                      point:
                        type: integer
                        example: 100
                      task_steps:
                        type: array
                        items:
                          type: object
                          properties:
                            title:
                              type: string
                              example: "Step 1"
                            description:
                              type: string
                              example: "Step 1 description"
                        example:
                          - title: "Step 1"
                            description: "Step 1 description"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: invalid request data
    get:
      tags:
        - manage tasks
      summary: View all tasks
      description: Endpoint admin to view all tasks with filters and pagination
      operationId: viewAllTasks
      security:
        - Bearer: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 10
            default: 10
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: TM0001
                            title:
                              type: string
                              example: "Task 1"
                            description:
                              type: string
                              example: "Task 1 description"
                            thumbnail:
                              type: string
                              example: "https://example.com/thumbnail.jpg"
                            start_date:
                              type: string
                              format: date
                              example: "2020-01-01"
                            end_date:
                              type: string
                              format: date
                              example: "2020-01-01"
                            point:
                              type: integer
                              example: 100
                            task_creator:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: U00001
                                name:
                                  type: string
                                  example: "John Doe" 
                            task_steps:
                              type: array
                              items:
                                type: object
                                properties:
                                  title:
                                    type: string
                                    example: "Step 1"
                                  description:
                                    type: string
                                    example: "Step 1 description"
                                example:
                                  - title: "Step 1"
                                    description: "Step 1 description"
                            page:
                              type: integer
                              example: 1
                            limit:
                              type: integer
                              example: 10
                            total_data:
                              type: integer
                              example: 1
                            total_page:
                              type: integer
                              example: 1
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: invalid page or limit'
  /tasks/{taskId}:
    get:
      tags:
        - manage tasks
      summary: View task detail
      description: Endpoint admin to view task detail by task id
      operationId: viewTask
      security:
        - Bearer: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: ID of the task to be viewed
          example: TM0001
      responses:
        '200':
          description: Task detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: TM0001
                      title:
                        type: string
                        example: "Task 1"
                      description:
                        type: string
                        example: "Task 1 description"
                      thumbnail:
                        type: string
                        example: "https://example.com/thumbnail.jpg"
                      start_date:
                        type: string
                        format: date
                        example: "2020-01-01"
                      end_date:
                        type: string
                        format: date
                        example: "2020-01-01"
                      point:
                        type: integer
                        example: 100
                      task_creator:
                        type: object
                        properties:
                          id:
                            type: string
                            example: U00001
                          name:
                            type: string
                            example: "John Doe" 
                      task_steps:
                        type: array
                        items:
                          type: object
                          properties:
                            title:
                              type: string
                              example: "Step 1"
                            description:
                              type: string
                              example: "Step 1 description"
                          example:
                            - title: "Step 1"
                              description: "Step 1 description"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: task not found
    put:
      tags:
        - manage tasks
      summary: Update task
      description: Endpoint admin to update task
      operationId: updateTask
      security:
        - Bearer: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: ID of the task to be updated
          example: TM0001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Task 1"
                description:
                  type: string
                  example: "Task 1 description"
                thumbnail:
                  type: string
                  example: "https://example.com/thumbnail.jpg"
                start_date:
                  type: string
                  format: date
                  example: "2020-01-01"
                end_date:
                  type: string
                  format: date 
                  example: "2020-01-01"
                point:
                  type: integer
                  example: 100
                task_steps:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Step 1"
                      description:
                        type: string
                        example: "Step 1 description"
                    example:
                      - title: "Step 1"
                        description: "Step 1 description"
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: TM0001
                      title:
                        type: string
                        example: "Task 1"
                      description:
                        type: string
                        example: "Task 1 description"
                      thumbnail:
                        type: string
                        example: "https://example.com/thumbnail.jpg"
                      start_date:
                        type: string
                        format: date
                        example: "2020-01-01"
                      end_date:
                        type: string
                        format: date
                        example: "2020-01-01"
                      point:
                        type: integer
                        example: 100
                      task_steps:
                        type: array
                        items:
                          type: object
                          properties:
                            title:
                              type: string
                              example: "Step 1"
                            description:
                              type: string
                              example: "Step 1 description"
                          example:
                            - title: "Step 1"
                              description: "Step 1 description"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: task not found
    delete:
      tags:
        - manage tasks
      summary: Delete task
      description: Endpoint admin to delete task
      operationId: deleteTask
      security:
        - Bearer: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: ID of the task to be deleted
          example: TM0001
      responses:
        '200':
          description: Task successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: data deleted successfully
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: task not found
  /user/tasks:
    get:
      tags:
        - user tasks
      summary: Get user tasks
      description: Endpoint user to get all tasks
      operationId: getUserTasks
      security:
        - Bearer: []
      responses:
        '200':
          description: Get user tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: TM0001
                    title:
                      type: string
                      example: "Task 1"
                    description:
                      type: string
                      example: "Task 1 description"
                    thumbnail:
                      type: string
                      example: "https://example.com/thumbnail.jpg"
                    start_date:
                      type: string
                      format: date
                      example: "2020-01-01"
                    end_date:
                      type: string
                      format: date
                      example: "2020-01-01"
                    point:
                      type: integer
                      example: 100
                    status:
                      type: boolean
                      example: true
                    task_steps:
                      type: array
                      items:
                        type: object
                        properties:
                          title:
                            type: string
                            example: "Step 1"
                          description:
                            type: string
                            example: "Step 1 description"
                        example:
                          - title: "Step 1"
                            description: "Step 1 description"

  /user/tasks/{taskId}:
    get:
      tags:
        - user tasks
      summary: Get user task
      description: Endpoint user to get task by task id
      operationId: getUserTask
      security:
        - Bearer: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: ID of the task
          example: TM0001
      responses:
        '200':
          description: Get user task
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: TM0001
                      title:
                        type: string
                        example: "Task 1"
                      description:
                        type: string
                        example: "Task 1 description"
                      thumbnail:
                        type: string
                        example: "https://example.com/thumbnail.jpg"
                      start_date:
                        type: string
                        format: date
                        example: "2020-01-01"
                      end_date:
                        type: string
                        format: date
                        example: "2020-01-01"
                      point:
                        type: integer
                        example: 100
                      status:
                        type: boolean
                        example: true
                      task_steps:
                        type: array
                        items:
                          type: object
                          properties:
                            title:
                              type: string
                              example: "Step 1"
                            description:
                              type: string
                              example: "Step 1 description"
                        example:
                          - title: "Step 1"
                            description: "Step 1 description"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: task not found
    post:
      tags:
        - user tasks
      summary: create user task
      description: Endpoint user to create task or start task
      operationId: createUserTask
      security:
        - Bearer: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: ID of the task
          example: TM0001
      responses:
        '200':
          description: Create user task
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: UT0001
                      status_progress:
                        type: string
                        example: "in_progress"
                      task_challenge:
                        type: object
                        properties:
                          id:
                            type: string
                            example: CH0001
                          title:
                            type: string
                            example: "Challenge 1"
                          description:
                            type: string
                            example: "Challenge 1 description"
                          thumbnail:
                            type: string
                            example: "https://example.com/thumbnail.jpg"
                          start_date:
                            type: string
                            format: date
                            example: "2020-01-01"
                          end_date:
                            type: string
                            format: date
                            example: "2020-01-01"
                          point:
                            type: integer
                            example: 100
                          status_task:
                            type: boolean
                            example: true
                          task_steps:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                title:
                                  type: integer
                                  example: "Step 1"
                                description:
                                  type: integer
                                  example: "Step 1 description"
                            example:
                              - title: "Step 1"
                                description: "Step 1 description"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: task not found
  /user_current/tasks/in-progress:
    get:
      tags:
        - user tasks
      summary: Get user current task
      description: Endpoint user to get current task
      operationId: getUserCurrentTask
      security:
        - Bearer: []
      responses:
        '200':
          description: Get user current task
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: UT0001
                    status_progress:
                      type: string
                      example: "in_progress"
                    task_challenge:
                      type: object
                      properties:
                        id:
                          type: string
                          example: CH0001
                        title:
                          type: string
                          example: "Challenge 1"
                        description:
                          type: string
                          example: "Challenge 1 description"
                        thumbnail:
                          type: string
                          example: "https://example.com/thumbnail.jpg"
                        start_date:
                          type: string
                          format: date
                          example: "2020-01-01"
                        end_date:
                          type: string
                          format: date
                          example: "2020-01-01"
                        point:
                          type: integer
                          example: 100
                        status_task:
                          type: boolean
                          example: true
                        task_steps:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              title:
                                type: integer
                                example: "Step 1"
                              description:
                                type: integer
                                example: "Step 1 description"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: user has no current task

  /user_current/tasks/{userTaskId}:
    post:   
      tags:
        - user tasks     
      summary: complete user current task
      description: Endpoint user to complete user current task
      operationId: completeUserCurrentTask
      security:
        - Bearer: []
      parameters:
        - name: userTaskId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user task
          example: UT0001
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Description:
                  type: string
                  example: "image description"
                images:
                  type: array
                  items:
                    type: string
                    format: image
                  example: ["image1.jpg", "image2.jpg"]
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: UT0001
                      status_progress:
                        type: string
                        example: "completed"
                      status_accepted:
                        type: string
                        example: "need_review"
                      point: 
                        type: integer
                        example: 100
                      task_challenge:
                        type: object
                        properties:
                          id:
                            type: string
                            example: TM0001 
                          title:
                            type: string
                            example: "Task 1"
                          description:
                            type: string
                            example: "Task 1 description"
                          thumbnail:
                            type: string
                            example: "https://example.com/thumbnail.jpg"
                          start_date:
                            type: string
                            format: date
                            example: "2020-01-01"
                          end_date:
                            type: string
                            format: date
                            example: "2020-01-01"
                          status_task:
                            type: boolean
                            example: true
                          task_steps:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                title:
                                  type: integer
                                  example: "Step 1"
                                description:
                                  type: integer
                                  example: "Step 1 description"

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: user has no current task
 
  /user_current/tasks/done:
    get:
      tags:
        - user tasks
      summary: Get user current task done
      description: Endpoint user to get user current task done
      operationId: getUserCurrentTaskDone
      security:
        - Bearer: []
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: UT0001
                        status_progress:
                          type: string
                          example: "completed"
                        status_accepted:
                          type: string
                          example: "need_review"  
                        reason_rejected:
                          type: string
                          example: ""
                        point: 
                          type: integer
                          example: 100
                        task_challenge:
                          type: object
                          properties:
                            id:
                              type: string
                              example: TM0001 
                            title:
                              type: string
                              example: "Task 1"
                            description:
                              type: string
                              example: "Task 1 description"
                            thumbnail:
                              type: string
                              example: "https://example.com/thumbnail.jpg"
                            start_date:
                              type: string
                              format: date
                              example: "2020-01-01"
                            end_date:
                              type: string
                              format: date
                              example: "2020-01-01"
                            status_task:
                              type: boolean
                              example: true
                            task_steps:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: integer
                                    example: 1
                                  title:
                                    type: integer
                                    example: "Step 1"
                                  description:
                                    type: integer
                                    example: "Step 1 description"

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: user has no current task
  /custom-datas:
    get:
      tags:
        - manage custom data     
      summary: Get all custom data with pagination
      description: Endpoint admin get all custom data 
      operationId: getAllCustomData
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
          example: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of custom data per page
          example: 10
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            default: created_at
          description: Sorted by
          example: created_at
        - name: sort_type
          in: query
          required: false
          schema:
            type: string
            default: asc
          description: Sorted type
          example: asc
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 10
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      custom-datas:
                        type: array
                        items:
                          $ref: '#/components/schemas/CustomData' 
        '500':
          description: Internal server error
  /custom-data/{dataId}:
    get:
      tags:
        - manage custom data     
      summary: Get custom data by id
      description: Endpoint admin get custom data by id 
      operationId: getCustomDataByID
      security:
        - Bearer: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: object
                    $ref: '#/components/schemas/CustomData'
        '404':
          description: Custom data not found
        '500':
          description: Internal server error 
    put:
      tags:
        - manage custom data     
      summary: Update custom data by id
      description: Endpoint admin update custom data by id 
      operationId: updateCustomDataByID
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomDataInput'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: custom data updated!
        '404':
          description: Custom data not found
        '500':
          description: Internal server error 
    delete:
      tags:
        - manage custom data     
      summary: Delete custom data by id
      description: Endpoint admin delete custom data by id 
      operationId: deleteCustomDataByID
      security:
        - Bearer: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: custom data deleted!
        '404':
          description: Custom data not found
        '500':
          description: Internal server error 
  /custom-data:
    post:
      tags:
        - manage custom data     
      summary: Create new custom data
      description: Endpoint admin create new custom data  
      operationId: postCustomData
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomDataInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: custom data created!
                  data:
                    type: object
                    $ref: '#/components/schemas/CustomData'
        '400':
          description: Bad Request / Validation Error
        '500':
          description: Internal server error
  
  /remin-ai:
    post:
      tags:
        - chatbot (ReMin AI)
      summary: Asking question
      description: Endpoint user to ask AI  
      operationId: postReminAI
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  example: Bagaimana cara saya mengelola beberapa sampah anorganik
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  data:
                    type: object
                    properties:
                      question:
                        type: string
                        example: Bagaimana cara saya mengelola beberapa sampah anorganik
                      answer_ai: 
                        type: string
                        example: Untuk mengelola sampah anorganik seperti kaca, logam, dan beberapa jenis plastik, Anda dapat memulai dengan melakukan pemisahan sampah berdasarkan jenis bahan. Pastikan untuk membersihkan sampah tersebut sebelum membuangnya. Selanjutnya, Anda bisa mengirimkan sampah anorganik tersebut ke fasilitas daur ulang yang sesuai agar dapat didaur ulang menjadi produk baru. Proses daur ulang sampah anorganik ini melibatkan langkah-langkah seperti penghancuran, pemurnian, dan transformasi menjadi produk daur ulang. Dengan mengelola sampah anorganik secara benar, Anda turut berkontribusi dalam melestarikan lingkungan dan mengurangi jumlah sampah yang berakhir di tempat pembuangan akhir.\n\nSaya tidak tahu jawabannya karena pertanyaan Anda tidak terkait dengan aplikasi kami.
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@gmail.com
        phone_number:
          type: string
          example: 089511223344
        address:
          type: string
          example: Jalan Soedirman
        gender:
          type: string
          enum: [laki-laki, perempuan]
          example: laki-laki
        birth_date:
          type: string
          format: date
          example: "1990-01-01"
    UserRegister:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@gmail.com
        password:
          type: string
          example: password@123
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: john.doe@gmail.com
        password:
          type: string
          example: password@123
    Report:
      type: object
      properties:
        reportType:
          type: string
          enum: [rubbish, littering]
          description: Type of the report
          example: rubbish
        title:
          type: string
          description: Title of the report
          example: "Rubbish in the park"
        description:
          type: string
          description: Description of the report
          example: "There is a lot of rubbish in the central park near the playground."
        images:
          type: array
          items:
            type: string
            format: binary
          description: Multiple images for the report
          example: ["image1.jpg", "image2.jpg"]
        wasteType:
          type: string
          enum: [organic, inorganic, hazardous]
          description: Type of waste
          example: inorganic
        wasteMaterials:
          type: array
          items:
            type: string
            enum: [plastic, glass, wood, paper, battery, metal, toxicWaste, hazardousWaste]
          description: Multiple choice for types of waste materials
          example: ["plastic", "paper", "battery"]
        lat:
          type: number
          format: float
          description: Latitude of the location
          example: -6.200000
        long:
          type: number
          format: float
          description: Longitude of the location
          example: 106.816666
        location:
          type: string
          description: General location description
          example: "Central Park, Jakarta"
        address:
          type: string
          description: Address of the location
          example: "Jl. Medan Merdeka Selatan, Jakarta"
        status:
          type: string
          enum: [need review, approve, reject]
          default: need review
          description: Status of the report
          example: need review
    ReportResponse:
      type: object
      properties:
        id:
          type: string
          description: ID of the created report
          example: RPT0006
        author_id:
          type: string
          description: ID of the report author
          example: USR0003
        report_type:
          type: string
          description: Type of the report
          example: rubbish
        title:
          type: string
          description: Title of the report
          example: ""
        description:
          type: string
          description: Description of the report
          example: Tempat sampah di dekat halte bus sudah penuh dengan sampah.
        waste_type:
          type: string
          description: Type of waste
          example: sampah basah,sampah kering
        latitude:
          type: number
          format: float
          description: Latitude coordinate
          example: -6.1754
        longitude:
          type: number
          format: float
          description: Longitude coordinate
          example: 106.8272
        address:
          type: string
          description: Address of the report
          example: Jl. Sudirman
        city:
          type: string
          description: City of the report
          example: Jakarta
        province:
          type: string
          description: Province of the report
          example: DKI Jakarta
        status:
          type: string
          description: Status of the report
          example: need review
        waste_materials:
          type: array
          items:
            $ref: '#/components/schemas/WasteMaterial'
        report_images:
          type: array
          items:
            type: string
            format: uri
            description: URL of the report images
          example:
            - https://res.cloudinary.com/dlbbsdd3a/image/upload/v1717008205/recything/reports/dpz5ztmx9lo65ivcqbot.jpg
            - https://res.cloudinary.com/dlbbsdd3a/image/upload/v1717008205/recything/reports/zwk2gotn8tywjewpzkhn.jpg
        created_at:
          type: string
          format: date-time
          description: Date and time when the report was created
          example: "2024-05-30T01:43:26.482+07:00"
    WasteMaterial:
      type: object
      properties:
        id:
          type: string
          description: ID of the waste material
          example: MTR04
        type:
          type: string
          description: Type of the waste material
          example: kertas
    Article:
      type: object
      properties:
        id:
          type: string
          example: ART0001
        title:
          type: string
          example: "The Benefits of Recycling"
        description:
          type: string
          example: "Recycling has numerous benefits for the environment."
        category:
          type: array
          items:
            type: string
            enum: [organic, plastic, paper, glass, textile, can, electronic, others]
            example: "plastic"
        thumbnail:
          type: string
          example: "thumbnail.jpg"
    Achievement:
      type: object
      properties:
        name:
          type: string
          enum: [classic, silver, gold, platinum]
          example: gold
        target_point:
          type: integer
          example: 500
    Admin:
      type: object
      properties:
        id:
          type: string
          example: ADM0001
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        password:
          type: string
          example: password@123
        role:
          type: string
          enum: [admin, superadmin]
          example: admin
        profile_photo:
          type: string
          format: image
          example: "profile.jpg"
    EditAdmin:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        old_password:
          type: string
          example: password@123
        new_password:
          type: string
          example: password@123
        role:
          type: string
          enum: [admin, superadmin]
          example: admin
        profile_photo:
          type: string
          format: image
          example: "profile.jpg"
    AdminResponse:
      type: object
      properties:
        id:
          type: string
          example: ADM0001
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        role:
          type: string
          enum: [admin, superadmin]
          example: admin
        profile_photo:
          type: string
          example: "https://example.com/profile.jpg"
    FAQs:
      type: object
      properties:
        id: 
          type: string
          example: FAQ01
        category:
          type: string
          example: profil
        question:
          type: string
          example: Bagaimana cara saya memperbarui informasi profil saya?
        answer:
          type: string
          example: Anda dapat memperbarui informasi profil Anda melalui menu 'Pengaturan Profil' di aplikasi. Klik ikon profil, pilih 'Pengaturan', dan edit informasi yang diperlukan.
    CustomData:
      type: object
      properties:
        id:
          type: string
          example: CDT0001
        topic:
          type: string
          example: Daur Ulang Plastik
        description:
          type: string
          example: Proses daur ulang plastik melibatkan pengumpulan sampah plastik, pembersihan, penghancuran menjadi serpihan kecil, dan kemudian melelehkannya untuk dibentuk menjadi produk baru. Plastik yang dapat didaur ulang termasuk botol air, wadah makanan, dan kantong belanja tertentu.
        created_at:
          type: string
          example: 2024-06-05 23:17:50.484 +0700 +07
        updated_at:
          type: string
          example: 2024-06-05 23:17:50.484 +0700 +07
    CustomDataInput:
      type: object
      properties:
        topic:
          type: string
          example: Daur Ulang Plastik
        description:
          type: string
          example: Proses daur ulang plastik melibatkan pengumpulan sampah plastik, pembersihan, penghancuran menjadi serpihan kecil, dan kemudian melelehkannya untuk dibentuk menjadi produk baru. Plastik yang dapat didaur ulang termasuk botol air, wadah makanan, dan kantong belanja tertentu.
        